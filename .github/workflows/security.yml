name: üîí Security Scan

on:
  schedule:
    # ÊØèÂ§©ÂáåÊô® 2 ÁÇπËøêË°å
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
    paths:
      - 'go.mod'
      - 'go.sum'
      - '**/go.mod'
      - '**/go.sum'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Scan type'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - dependencies
          - code
          - containers
          - secrets

env:
  GO_VERSION: '1.24.5'

jobs:
  # ‰æùËµñÊºèÊ¥ûÊâ´Êèè
  dependency-scan:
    name: üì¶ Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: ${{ inputs.scan_type == 'all' || inputs.scan_type == 'dependencies' || github.event_name == 'schedule' || github.event_name == 'push' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            webox/api-service/go.sum
            webox/websoft9-agent/go.sum

      - name: Install Nancy
        run: |
          go install github.com/sonatypecommunity/nancy@latest

      - name: Run Nancy vulnerability scan
        run: |
          echo "ËøêË°å Nancy ‰æùËµñÊºèÊ¥ûÊâ´Êèè..."
          mkdir -p reports

          # Êâ´Êèè api-service ‰æùËµñ
          echo "Êâ´Êèè api-service ‰æùËµñ..."
          cd webox/api-service
          go list -json -m all | nancy sleuth --output-format=json > ../../reports/nancy-api-service.json || true
          cd ../..

          # Êâ´Êèè websoft9-agent ‰æùËµñ
          echo "Êâ´Êèè websoft9-agent ‰æùËµñ..."
          cd webox/websoft9-agent
          go list -json -m all | nancy sleuth --output-format=json > ../../reports/nancy-agent.json || true
          cd ../..

          echo "Nancy Êâ´ÊèèÂÆåÊàê"

      - name: Run Snyk vulnerability scan for api-service
        uses: snyk/actions/golang@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json-file-output=reports/snyk-api-service.json
          command: test
        continue-on-error: true
        if: env.SNYK_TOKEN != ''

      - name: Run Snyk vulnerability scan for websoft9-agent
        uses: snyk/actions/golang@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json-file-output=reports/snyk-agent.json
          command: test
        continue-on-error: true
        if: env.SNYK_TOKEN != ''

      - name: Process vulnerability results
        run: |
          echo "Â§ÑÁêÜÊºèÊ¥ûÊâ´ÊèèÁªìÊûú..."

          # ÂàõÂª∫ÊºèÊ¥ûÊä•Âëä
          cat > reports/vulnerability-summary.md << 'EOF'
          # üîí ‰æùËµñÊºèÊ¥ûÊâ´ÊèèÊä•Âëä

          **Êâ´ÊèèÊó∂Èó¥:** $(date)
          **Êâ´ÊèèËåÉÂõ¥:** Go ‰æùËµñÂåÖ

          ## üìä Êâ´ÊèèÁªìÊûúÊ±áÊÄª

          EOF

          # Â§ÑÁêÜ Nancy ÁªìÊûú
          if [ -f "reports/nancy-api-service.json" ]; then
            nancy_count=$(jq '.vulnerable | length' reports/nancy-api-service.json 2>/dev/null || echo "0")
            echo "- **API Service ÊºèÊ¥ûÊï∞Èáè:** $nancy_count" >> reports/vulnerability-summary.md
          fi

          if [ -f "reports/nancy-agent.json" ]; then
            nancy_count=$(jq '.vulnerable | length' reports/nancy-agent.json 2>/dev/null || echo "0")
            echo "- **Agent ÊºèÊ¥ûÊï∞Èáè:** $nancy_count" >> reports/vulnerability-summary.md
          fi

          # Â§ÑÁêÜ Snyk ÁªìÊûú
          if [ -f "reports/snyk-results.json" ]; then
            snyk_count=$(jq '.vulnerabilities | length' reports/snyk-results.json 2>/dev/null || echo "0")
            echo "- **Snyk ÂèëÁé∞ÊºèÊ¥ûÊï∞Èáè:** $snyk_count" >> reports/vulnerability-summary.md
          fi

          echo "" >> reports/vulnerability-summary.md
          echo "## üìã ËØ¶ÁªÜ‰ø°ÊÅØ" >> reports/vulnerability-summary.md
          echo "" >> reports/vulnerability-summary.md
          echo "ËØ¶ÁªÜÁöÑÊºèÊ¥û‰ø°ÊÅØËØ∑Êü•ÁúãÁõ∏Â∫îÁöÑ JSON Êä•ÂëäÊñá‰ª∂„ÄÇ" >> reports/vulnerability-summary.md

      - name: Create security issues for high severity vulnerabilities
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            // ËØªÂèñ Nancy ÁªìÊûú
            const processNancyResults = (filePath, service) => {
              if (!fs.existsSync(filePath)) return [];

              try {
                const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
                return (data.vulnerable || []).filter(vuln =>
                  vuln.cve && (vuln.cvssScore >= 7.0 || vuln.severity === 'HIGH' || vuln.severity === 'CRITICAL')
                ).map(vuln => ({
                  service,
                  type: 'dependency',
                  id: vuln.cve,
                  package: vuln.coordinates,
                  severity: vuln.severity || 'HIGH',
                  score: vuln.cvssScore,
                  description: vuln.title,
                  reference: vuln.reference
                }));
              } catch (e) {
                console.log(`Error processing ${filePath}:`, e.message);
                return [];
              }
            };

            // Â§ÑÁêÜÊºèÊ¥ûÁªìÊûú
            const vulnerabilities = [
              ...processNancyResults('reports/nancy-api-service.json', 'api-service'),
              ...processNancyResults('reports/nancy-agent.json', 'websoft9-agent')
            ];

            console.log(`Found ${vulnerabilities.length} high severity vulnerabilities`);

            // ‰∏∫È´òÂç±ÊºèÊ¥ûÂàõÂª∫ Issue
            for (const vuln of vulnerabilities) {
              const title = `[Security]: ${vuln.id} in ${vuln.package}`;
              const body = `## üîí ÂÆâÂÖ®ÊºèÊ¥ûÊä•Âëä

              **ÊºèÊ¥û ID:** ${vuln.id}
              **ÂΩ±ÂìçÊúçÂä°:** ${vuln.service}
              **ÂΩ±ÂìçÂåÖ:** ${vuln.package}
              **‰∏•ÈáçÁ®ãÂ∫¶:** ${vuln.severity}
              **CVSS ËØÑÂàÜ:** ${vuln.score || 'N/A'}

              ### ÊèèËø∞
              ${vuln.description}

              ### ÂèÇËÄÉÈìæÊé•
              ${vuln.reference || 'N/A'}

              ### Âª∫ËÆÆÊé™ÊñΩ
              1. Ê£ÄÊü•ÊòØÂê¶ÊúâÂèØÁî®ÁöÑÂÆâÂÖ®Êõ¥Êñ∞
              2. ËØÑ‰º∞ÊºèÊ¥ûÂØπÁ≥ªÁªüÁöÑÂÆûÈôÖÂΩ±Âìç
              3. Âà∂ÂÆö‰øÆÂ§çËÆ°Âàí
              4. Êõ¥Êñ∞‰æùËµñÂåÖÂà∞ÂÆâÂÖ®ÁâàÊú¨

              ---
              *Ê≠§ Issue Áî±ÂÆâÂÖ®Êâ´ÊèèÂ∑•‰ΩúÊµÅËá™Âä®ÂàõÂª∫*`;

              // Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®Áõ∏ÂêåÁöÑ Issue
              const { data: existingIssues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: 'security,vulnerability',
                state: 'open'
              });

              const existingIssue = existingIssues.find(issue =>
                issue.title.includes(vuln.id) && issue.title.includes(vuln.package)
              );

              if (!existingIssue) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: body,
                  labels: ['security', 'vulnerability', 'high-priority'],
                  assignees: []
                });

                console.log(`Created issue for vulnerability: ${vuln.id}`);
              } else {
                console.log(`Issue already exists for vulnerability: ${vuln.id}`);
              }
            }

      - name: Upload vulnerability reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vulnerability-reports
          path: reports/
          retention-days: 30

  # ‰ª£Á†ÅÂÆâÂÖ®Êâ´Êèè
  code-security-scan:
    name: üîç Code Security Scan
    runs-on: ubuntu-latest
    if: ${{ inputs.scan_type == 'all' || inputs.scan_type == 'code' || github.event_name == 'schedule' || github.event_name == 'push' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            webox/api-service/go.sum
            webox/websoft9-agent/go.sum

      - name: Run Gosec Security Scanner for api-service
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt sarif -out gosec-api-service.sarif webox/api-service/...'

      - name: Run Gosec Security Scanner for websoft9-agent
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt sarif -out gosec-agent.sarif webox/websoft9-agent/...'

      - name: Upload Gosec scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: gosec-api-service.sarif

      - name: Upload Gosec scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: gosec-agent.sarif

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: go

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ÂØÜÈí•Ê≥ÑÈú≤Ê£ÄÊü•
  secrets-scan:
    name: üîê Secrets Scan
    runs-on: ubuntu-latest
    if: ${{ inputs.scan_type == 'all' || inputs.scan_type == 'secrets' || github.event_name == 'schedule' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # ÂÆπÂô®ÈïúÂÉèÂÆâÂÖ®Êâ´Êèè
  container-security-scan:
    name: üê≥ Container Security Scan
    runs-on: ubuntu-latest
    if: ${{ inputs.scan_type == 'all' || inputs.scan_type == 'containers' || github.event_name == 'schedule' }}
    strategy:
      matrix:
        service: ['api-service', 'websoft9-agent']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: webox/${{ matrix.service }}
          file: webox/${{ matrix.service }}/Dockerfile
          tags: ${{ matrix.service }}:scan
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.service }}:scan
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.service }}-results.sarif'

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        id: grype-scan
        with:
          image: ${{ matrix.service }}:scan
          fail-build: false
          output-format: sarif

      - name: Upload Grype scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: ${{ steps.grype-scan.outputs.sarif }}

  # ÂÆâÂÖ®ÈÖçÁΩÆÊ£ÄÊü•
  security-config-check:
    name: ‚öôÔ∏è Security Configuration Check
    runs-on: ubuntu-latest
    if: ${{ inputs.scan_type == 'all' || github.event_name == 'schedule' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for security best practices
        run: |
          echo "Ê£ÄÊü•ÂÆâÂÖ®ÈÖçÁΩÆÊúÄ‰Ω≥ÂÆûË∑µ..."
          mkdir -p reports

          # Ê£ÄÊü• Dockerfile ÂÆâÂÖ®ÈÖçÁΩÆ
          echo "## üê≥ Dockerfile ÂÆâÂÖ®Ê£ÄÊü•" > reports/security-config.md
          echo "" >> reports/security-config.md

          for dockerfile in $(find . -name "Dockerfile" -o -name "*.dockerfile"); do
            echo "Ê£ÄÊü• $dockerfile..."
            echo "### $dockerfile" >> reports/security-config.md
            echo "" >> reports/security-config.md

            # Ê£ÄÊü•ÊòØÂê¶‰ΩøÁî®Èùû root Áî®Êà∑
            if grep -q "USER" "$dockerfile"; then
              echo "‚úÖ ‰ΩøÁî®Èùû root Áî®Êà∑" >> reports/security-config.md
            else
              echo "‚ö†Ô∏è Âª∫ËÆÆ‰ΩøÁî®Èùû root Áî®Êà∑" >> reports/security-config.md
            fi

            # Ê£ÄÊü•ÊòØÂê¶Âõ∫ÂÆöÂü∫Á°ÄÈïúÂÉèÁâàÊú¨
            if grep -E "FROM.*:latest" "$dockerfile"; then
              echo "‚ö†Ô∏è ‰ΩøÁî®‰∫Ü latest Ê†áÁ≠æÔºåÂª∫ËÆÆÂõ∫ÂÆöÁâàÊú¨" >> reports/security-config.md
            else
              echo "‚úÖ ‰ΩøÁî®Âõ∫ÂÆöÁâàÊú¨ÁöÑÂü∫Á°ÄÈïúÂÉè" >> reports/security-config.md
            fi

            echo "" >> reports/security-config.md
          done

          # Ê£ÄÊü• GitHub Actions ÂÆâÂÖ®ÈÖçÁΩÆ
          echo "## üîß GitHub Actions ÂÆâÂÖ®Ê£ÄÊü•" >> reports/security-config.md
          echo "" >> reports/security-config.md

          for workflow in .github/workflows/*.yml; do
            echo "Ê£ÄÊü• $workflow..."

            # Ê£ÄÊü•ÊòØÂê¶Âõ∫ÂÆö action ÁâàÊú¨
            if grep -E "uses:.*@main|uses:.*@master" "$workflow"; then
              echo "‚ö†Ô∏è $workflow ‰ΩøÁî®‰∫Ü‰∏çÂõ∫ÂÆöÁöÑ action ÁâàÊú¨" >> reports/security-config.md
            fi
          done

          echo "ÂÆâÂÖ®ÈÖçÁΩÆÊ£ÄÊü•ÂÆåÊàê"

      - name: Upload security config report
        uses: actions/upload-artifact@v3
        with:
          name: security-config-report
          path: reports/security-config.md
          retention-days: 30

  # ÂÆâÂÖ®Êâ´ÊèèÊ±áÊÄª
  security-summary:
    name: üìä Security Scan Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, secrets-scan, container-security-scan, security-config-check]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate security summary
        run: |
          echo "# üîí ÂÆâÂÖ®Êâ´ÊèèÊä•ÂëäÊ±áÊÄª" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Êâ´ÊèèÊó∂Èó¥:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Ëß¶ÂèëÊñπÂºè:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## üìã Êâ´ÊèèÁªìÊûú" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Êâ´ÊèèÁ±ªÂûã | Áä∂ÊÄÅ | ËØ¥Êòé |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| ‰æùËµñÊºèÊ¥ûÊâ´Êèè | ${{ needs.dependency-scan.result }} | Ê£ÄÊü• Go ‰æùËµñÂåÖÁöÑÂ∑≤Áü•ÊºèÊ¥û |" >> $GITHUB_STEP_SUMMARY
          echo "| ‰ª£Á†ÅÂÆâÂÖ®Êâ´Êèè | ${{ needs.code-security-scan.result }} | ÈùôÊÄÅ‰ª£Á†ÅÂÆâÂÖ®ÂàÜÊûê |" >> $GITHUB_STEP_SUMMARY
          echo "| ÂØÜÈí•Ê≥ÑÈú≤Ê£ÄÊü• | ${{ needs.secrets-scan.result }} | Ê£ÄÊü•‰ª£Á†Å‰∏≠ÁöÑÊïèÊÑü‰ø°ÊÅØÊ≥ÑÈú≤ |" >> $GITHUB_STEP_SUMMARY
          echo "| ÂÆπÂô®ÂÆâÂÖ®Êâ´Êèè | ${{ needs.container-security-scan.result }} | Docker ÈïúÂÉèÊºèÊ¥ûÊâ´Êèè |" >> $GITHUB_STEP_SUMMARY
          echo "| ÂÆâÂÖ®ÈÖçÁΩÆÊ£ÄÊü• | ${{ needs.security-config-check.result }} | ÂÆâÂÖ®ÈÖçÁΩÆÊúÄ‰Ω≥ÂÆûË∑µÊ£ÄÊü• |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Á°ÆÂÆöÊï¥‰ΩìÂÆâÂÖ®Áä∂ÊÄÅ
          if [[ "${{ needs.dependency-scan.result }}" == "failure" || "${{ needs.code-security-scan.result }}" == "failure" || "${{ needs.secrets-scan.result }}" == "failure" ]]; then
            echo "## ‚ùå ÂèëÁé∞ÂÆâÂÖ®ÈóÆÈ¢ò" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "ÂÆâÂÖ®Êâ´ÊèèÂèëÁé∞‰∫ÜÈúÄË¶ÅÂÖ≥Ê≥®ÁöÑÈóÆÈ¢òÔºåËØ∑Êü•ÁúãËØ¶ÁªÜÊä•ÂëäÂπ∂ÂèäÊó∂‰øÆÂ§ç„ÄÇ" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚úÖ ÂÆâÂÖ®Êâ´ÊèèÈÄöËøá" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "ÊâÄÊúâÂÆâÂÖ®Êâ´ÊèèÈÉΩÂ∑≤ÈÄöËøáÔºåÊú™ÂèëÁé∞‰∏•ÈáçÁöÑÂÆâÂÖ®ÈóÆÈ¢ò„ÄÇ" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìé Áõ∏ÂÖ≥ÈìæÊé•" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [Security Ê†áÁ≠æÈ°µ](${{ github.server_url }}/${{ github.repository }}/security)" >> $GITHUB_STEP_SUMMARY
          echo "- [Â∑•‰ΩúÊµÅËøêË°å](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

      - name: Send security notification
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const needs = ${{ toJSON(needs) }};

            // ËÆ°ÁÆóÂ§±Ë¥•ÁöÑÊâ´Êèè
            const failedScans = Object.entries(needs)
              .filter(([name, result]) => result.result === 'failure')
              .map(([name]) => name);

            if (failedScans.length > 0) {
              // ÂèëÈÄÅÂÆâÂÖ®Ë≠¶Êä•
              const title = 'üö® ÂÆâÂÖ®Êâ´ÊèèÂèëÁé∞ÈóÆÈ¢ò';
              const body = `## ÂÆâÂÖ®Êâ´ÊèèË≠¶Êä•

              **Êó∂Èó¥:** ${new Date().toISOString()}
              **‰ªìÂ∫ì:** ${{ github.repository }}
              **ÂàÜÊîØ:** ${{ github.ref_name }}

              **Â§±Ë¥•ÁöÑÊâ´Êèè:**
              ${failedScans.map(scan => `- ${scan}`).join('\n')}

              ËØ∑ÂèäÊó∂Êü•ÁúãËØ¶ÁªÜÊä•ÂëäÂπ∂‰øÆÂ§çÂèëÁé∞ÁöÑÂÆâÂÖ®ÈóÆÈ¢ò„ÄÇ

              **Êü•ÁúãËØ¶ÊÉÖ:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
              `;

              // ÂàõÂª∫ÊàñÊõ¥Êñ∞ÂÆâÂÖ® Issue
              const { data: issues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: 'security,automated',
                state: 'open'
              });

              const existingIssue = issues.find(issue =>
                issue.title.includes('ÂÆâÂÖ®Êâ´ÊèèÂèëÁé∞ÈóÆÈ¢ò')
              );

              if (existingIssue) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: body
                });
              } else {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: body,
                  labels: ['security', 'automated', 'high-priority']
                });
              }
            }