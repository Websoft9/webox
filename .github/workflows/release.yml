name: 🎉 Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  GO_VERSION: '1.24.5'
  REGISTRY: docker.io
  REGISTRY_NAMESPACE: websoft9

jobs:
  # 验证发布条件
  validate-release:
    name: 🔍 Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      is_prerelease: ${{ steps.check-prerelease.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version
        id: extract-version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            version="${{ inputs.version }}"
          else
            version="${{ github.ref_name }}"
          fi

          echo "version=$version" >> $GITHUB_OUTPUT
          echo "发布版本: $version"

          # 验证版本格式
          if [[ ! "$version" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "❌ 版本格式不正确: $version"
            echo "正确格式: v1.0.0 或 v1.0.0-alpha"
            exit 1
          fi

          echo "✅ 版本格式正确"

      - name: Check if pre-release
        id: check-prerelease
        run: |
          version="${{ steps.extract-version.outputs.version }}"

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            is_prerelease="${{ inputs.prerelease }}"
          else
            # 检查版本号是否包含预发布标识
            if [[ "$version" =~ -[a-zA-Z] ]]; then
              is_prerelease="true"
            else
              is_prerelease="false"
            fi
          fi

          echo "is_prerelease=$is_prerelease" >> $GITHUB_OUTPUT
          echo "是否预发布: $is_prerelease"

      - name: Validate changelog
        run: |
          version="${{ steps.extract-version.outputs.version }}"

          if [ -f "CHANGELOG.md" ]; then
            if grep -q "$version" CHANGELOG.md; then
              echo "✅ CHANGELOG.md 包含版本 $version"
            else
              echo "⚠️ CHANGELOG.md 不包含版本 $version"
              echo "建议在 CHANGELOG.md 中添加版本说明"
            fi
          else
            echo "⚠️ 未找到 CHANGELOG.md 文件"
            echo "建议创建 CHANGELOG.md 文件记录版本变更"
          fi

      - name: Check for breaking changes
        run: |
          version="${{ steps.extract-version.outputs.version }}"

          # 检查是否为主版本更新（可能包含破坏性变更）
          if [[ "$version" =~ ^v[0-9]+\.0\.0$ ]]; then
            echo "⚠️ 主版本更新，可能包含破坏性变更"
            echo "请确保已更新迁移指南和文档"
          fi

  # 运行发布前测试
  pre-release-tests:
    name: 🧪 Pre-release Tests
    runs-on: ubuntu-latest
    needs: [validate-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            webox/api-service/go.sum
            webox/websoft9-agent/go.sum

      - name: Run comprehensive tests
        run: |
          echo "运行发布前测试..."

          # 运行 api-service 测试
          cd webox/api-service
          mkdir -p reports
          go test -v -race -coverprofile=reports/coverage.out ./...
          cd ../..

          # 运行 websoft9-agent 测试
          cd webox/websoft9-agent
          mkdir -p reports
          go test -v -race -coverprofile=reports/coverage.out ./...
          cd ../..

          echo "✅ 发布前测试完成"

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: pre-release-test-reports
          path: |
            webox/api-service/reports/
            webox/websoft9-agent/reports/
          retention-days: 30

  # 构建多平台二进制文件
  build-binaries:
    name: 🔨 Build Multi-platform Binaries
    runs-on: ubuntu-latest
    needs: [validate-release, pre-release-tests]
    strategy:
      matrix:
        service: ['api-service', 'websoft9-agent']
        include:
          - service: api-service
            context: webox/api-service
            main_path: ./cmd/server
          - service: websoft9-agent
            context: webox/websoft9-agent
            main_path: ./cmd/agent
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: ${{ matrix.context }}/go.sum

      - name: Build multi-platform binaries
        run: |
          version="${{ needs.validate-release.outputs.version }}"
          service="${{ matrix.service }}"
          context="${{ matrix.context }}"
          main_path="${{ matrix.main_path }}"

          echo "构建 $service 多平台二进制文件..."

          cd "$context"

          # 定义构建目标
          platforms=(
            "linux/amd64"
            "linux/arm64"
            "darwin/amd64"
            "darwin/arm64"
            "windows/amd64"
          )

          mkdir -p ../../dist/$service

          for platform in "${platforms[@]}"; do
            IFS='/' read -r GOOS GOARCH <<< "$platform"

            echo "构建 $GOOS/$GOARCH..."

            output_name="$service"
            if [ "$GOOS" = "windows" ]; then
              output_name="$service.exe"
            fi

            output_path="../../dist/$service/${service}_${version}_${GOOS}_${GOARCH}"
            if [ "$GOOS" = "windows" ]; then
              output_path="${output_path}.exe"
            fi

            # 构建二进制文件
            CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build \
              -ldflags "-X main.Version=$version -X main.Commit=${{ github.sha }} -X main.BuildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              -o "$output_path" \
              "$main_path"

            # 生成校验和
            if [ "$GOOS" = "windows" ]; then
              sha256sum "$output_path" > "${output_path}.sha256"
            else
              shasum -a 256 "$output_path" > "${output_path}.sha256"
            fi

            echo "✅ $GOOS/$GOARCH 构建完成"
          done

          echo "✅ $service 多平台构建完成"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-binaries
          path: dist/${{ matrix.service }}/
          retention-days: 30

  # 构建和推送 Docker 镜像
  build-docker-images:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: [validate-release, pre-release-tests]
    strategy:
      matrix:
        service: ['api-service', 'websoft9-agent']
        include:
          - service: api-service
            dockerfile: webox/api-service/Dockerfile
            context: webox/api-service
          - service: websoft9-agent
            dockerfile: webox/websoft9-agent/Dockerfile
            context: webox/websoft9-agent
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ matrix.service }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.validate-release.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.validate-release.outputs.version }}
            COMMIT=${{ github.sha }}
            BUILD_TIME=${{ github.run_id }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ matrix.service }}:${{ needs.validate-release.outputs.version }}
          format: spdx-json
          output-file: ${{ matrix.service }}-sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-sbom
          path: ${{ matrix.service }}-sbom.spdx.json
          retention-days: 90

  # 生成发布说明
  generate-release-notes:
    name: 📝 Generate Release Notes
    runs-on: ubuntu-latest
    needs: [validate-release]
    outputs:
      release_notes: ${{ steps.generate-notes.outputs.release_notes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: generate-notes
        run: |
          version="${{ needs.validate-release.outputs.version }}"

          echo "生成发布说明..."

          # 获取上一个标签
          previous_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -n "$previous_tag" ]; then
            echo "上一个版本: $previous_tag"
            commit_range="$previous_tag..HEAD"
          else
            echo "首次发布"
            commit_range="HEAD"
          fi

          # 生成发布说明
          cat > release_notes.md << EOF
          # $version 发布说明

          **发布时间:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **提交范围:** $commit_range

          ## 🎉 新功能

          EOF

          # 提取新功能提交
          git log --pretty=format:"- %s (%h)" $commit_range --grep="^feat" >> release_notes.md || true

          cat >> release_notes.md << EOF

          ## 🐛 Bug 修复

          EOF

          # 提取 bug 修复提交
          git log --pretty=format:"- %s (%h)" $commit_range --grep="^fix" >> release_notes.md || true

          cat >> release_notes.md << EOF

          ## 📚 文档更新

          EOF

          # 提取文档更新提交
          git log --pretty=format:"- %s (%h)" $commit_range --grep="^docs" >> release_notes.md || true

          cat >> release_notes.md << EOF

          ## 🔧 其他变更

          EOF

          # 提取其他类型的提交
          git log --pretty=format:"- %s (%h)" $commit_range --grep="^refactor\|^perf\|^test\|^chore" >> release_notes.md || true

          cat >> release_notes.md << EOF

          ## 📦 下载

          ### Docker 镜像

          \`\`\`bash
          # API Service
          docker pull ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/api-service:$version

          # Websoft9 Agent
          docker pull ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/websoft9-agent:$version
          \`\`\`

          ### 二进制文件

          请从 [Releases 页面](https://github.com/${{ github.repository }}/releases/tag/$version) 下载对应平台的二进制文件。

          ## 🔍 校验和

          所有二进制文件都提供了 SHA256 校验和，请在使用前验证文件完整性。

          ## 📋 完整变更日志

          查看 [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/$version/CHANGELOG.md) 了解详细变更信息。

          ## 🆘 支持

          如果遇到问题，请：

          1. 查看 [文档](https://docs.websoft9.com)
          2. 搜索 [已知问题](https://github.com/${{ github.repository }}/issues)
          3. 创建 [新的 Issue](https://github.com/${{ github.repository }}/issues/new)

          ---

          **完整提交历史:**

          EOF

          # 添加完整的提交历史
          git log --pretty=format:"- %s (%h) by %an" $commit_range >> release_notes.md

          # 输出发布说明
          release_notes=$(cat release_notes.md)
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$release_notes" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "✅ 发布说明生成完成"

      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release_notes.md
          retention-days: 90

  # 创建 GitHub Release
  create-github-release:
    name: 🚀 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-binaries, build-docker-images, generate-release-notes]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Prepare release assets
        run: |
          echo "准备发布资产..."

          mkdir -p release-assets

          # 复制二进制文件
          cp -r api-service-binaries/* release-assets/ 2>/dev/null || true
          cp -r websoft9-agent-binaries/* release-assets/ 2>/dev/null || true

          # 复制 SBOM 文件
          cp -r *-sbom/* release-assets/ 2>/dev/null || true

          # 生成发布资产清单
          echo "# 发布资产清单" > release-assets/ASSETS.md
          echo "" >> release-assets/ASSETS.md
          echo "## 二进制文件" >> release-assets/ASSETS.md
          echo "" >> release-assets/ASSETS.md

          for file in release-assets/*; do
            if [[ -f "$file" && ! "$file" =~ \.(md|json)$ ]]; then
              filename=$(basename "$file")
              size=$(ls -lh "$file" | awk '{print $5}')
              echo "- **$filename** ($size)" >> release-assets/ASSETS.md
            fi
          done

          echo "" >> release-assets/ASSETS.md
          echo "## 软件物料清单 (SBOM)" >> release-assets/ASSETS.md
          echo "" >> release-assets/ASSETS.md

          for file in release-assets/*.spdx.json; do
            if [[ -f "$file" ]]; then
              filename=$(basename "$file")
              echo "- **$filename**" >> release-assets/ASSETS.md
            fi
          done

          echo "✅ 发布资产准备完成"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          release_name: ${{ needs.validate-release.outputs.version }}
          body: ${{ needs.generate-release-notes.outputs.release_notes }}
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is_prerelease }}

      - name: Upload release assets
        run: |
          echo "上传发布资产..."

          upload_url="${{ steps.create_release.outputs.upload_url }}"

          for file in release-assets/*; do
            if [[ -f "$file" ]]; then
              filename=$(basename "$file")
              echo "上传 $filename..."

              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @"$file" \
                "${upload_url%\{*}?name=$filename"
            fi
          done

          echo "✅ 发布资产上传完成"



  # 发布总结
  release-summary:
    name: 📊 Release Summary
    runs-on: ubuntu-latest
    needs: [validate-release, pre-release-tests, build-binaries, build-docker-images, create-github-release]
    if: always()
    steps:
      - name: Generate release summary
        run: |
          version="${{ needs.validate-release.outputs.version }}"
          is_prerelease="${{ needs.validate-release.outputs.is_prerelease }}"

          echo "# 🎉 发布执行报告" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**版本:** $version" >> $GITHUB_STEP_SUMMARY
          echo "**类型:** $([ "$is_prerelease" = "true" ] && echo "预发布" || echo "正式发布")" >> $GITHUB_STEP_SUMMARY
          echo "**发布者:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**执行时间:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 📋 执行结果" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 阶段 | 状态 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 发布验证 | ${{ needs.validate-release.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 发布前测试 | ${{ needs.pre-release-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 二进制构建 | ${{ needs.build-binaries.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker 构建 | ${{ needs.build-docker-images.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub 发布 | ${{ needs.create-github-release.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # 确定整体状态
          if [[ "${{ needs.create-github-release.result }}" == "success" ]]; then
            echo "## ✅ 发布成功" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "版本 $version 已成功发布！" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ 发布失败" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "发布过程中出现了问题，请检查详细日志。" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📎 相关链接" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/$version)" >> $GITHUB_STEP_SUMMARY
          echo "- [Docker Hub](https://hub.docker.com/r/${{ env.REGISTRY_NAMESPACE }})" >> $GITHUB_STEP_SUMMARY
          echo "- [工作流运行](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY