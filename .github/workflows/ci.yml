name: 🚀 Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

env:
  GO_VERSION: '1.24.5'
  REGISTRY: docker.io
  REGISTRY_NAMESPACE: websoft9

jobs:
  # 代码质量检查
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ['api-service', 'websoft9-agent']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: webox/${{ matrix.service }}/go.sum

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: webox/${{ matrix.service }}
          args: --timeout=10m --out-format=github-actions

      - name: Run go vet
        working-directory: webox/${{ matrix.service }}
        run: |
          echo "运行 go vet 检查..."
          go vet ./...

  # 单元测试和集成测试
  tests:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    strategy:
      matrix:
        service: ['api-service', 'websoft9-agent']
    services:
      redis:
        image: redis:7.0
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: webox/${{ matrix.service }}/go.sum

      - name: Wait for services
        run: |
          echo "等待服务启动..."
          
          # 等待 Redis
          for i in {1..30}; do
            if redis-cli -h 127.0.0.1 -p 6379 ping 2>/dev/null | grep -q PONG; then
              echo "Redis 已就绪"
              break
            fi
            echo "等待 Redis... ($i/30)"
            sleep 2
          done
          
          echo "所有服务已就绪"

      - name: Initialize test database
        working-directory: webox
        run: |
          echo "初始化测试数据库..."
          if [ -f "./scripts/init-test-db.sh" ]; then
            chmod +x ./scripts/init-test-db.sh
            ./scripts/init-test-db.sh --type sqlite --database ./test.db --seed
          else
            echo "测试数据库初始化脚本不存在，跳过初始化"
          fi

      - name: Run unit tests
        working-directory: webox/${{ matrix.service }}
        env:
          DB_TYPE: sqlite
          DB_DSN: "./test.db"
          REDIS_URL: "redis://127.0.0.1:6379"
        run: |
          echo "运行 ${{ matrix.service }} 单元测试..."
          mkdir -p reports
          
          # 运行测试并生成覆盖率报告
          go test -v -race -coverprofile=reports/coverage.out -covermode=atomic ./... | tee reports/test-results.txt
          
          # 生成覆盖率报告
          if [ -f "reports/coverage.out" ]; then
            go tool cover -html=reports/coverage.out -o reports/coverage.html
            go tool cover -func=reports/coverage.out > reports/coverage.txt
          fi

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports-${{ matrix.service }}
          path: webox/${{ matrix.service }}/reports/
          retention-days: 30

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: webox/${{ matrix.service }}/reports/coverage.out
          flags: ${{ matrix.service }}
          name: codecov-${{ matrix.service }}
          token: ${{ secrets.CODECOV_TOKEN }}

  # 构建服务
  build:
    name: 🔨 Build Services
    runs-on: ubuntu-latest
    needs: [code-quality]
    strategy:
      matrix:
        service: ['api-service', 'websoft9-agent']
        include:
          - service: api-service
            context: webox/api-service
            main_path: ./cmd/server
          - service: websoft9-agent
            context: webox/websoft9-agent
            main_path: ./cmd/agent
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: ${{ matrix.context }}/go.sum

      - name: Build ${{ matrix.service }}
        working-directory: ${{ matrix.context }}
        run: |
          echo "构建 ${{ matrix.service }}..."
          
          # 构建二进制文件
          if [ -f "Makefile" ]; then
            make build
          else
            go build -v -o ${{ matrix.service }} ${{ matrix.main_path }}
          fi
          
          echo "✅ ${{ matrix.service }} 构建成功"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-binary
          path: ${{ matrix.context }}/${{ matrix.service }}
          retention-days: 7

  # Docker 镜像构建
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [build, tests]
    if: always() && (needs.build.result == 'success' && (needs.tests.result == 'success' || needs.tests.result == 'skipped'))
    strategy:
      matrix:
        service: ['api-service', 'websoft9-agent']
        include:
          - service: api-service
            dockerfile: webox/api-service/Dockerfile
            context: webox/api-service
          - service: websoft9-agent
            dockerfile: webox/websoft9-agent/Dockerfile
            context: webox/websoft9-agent
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.context }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.ref == 'refs/heads/main' && github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        if: github.ref == 'refs/heads/main'
        uses: anchore/sbom-action@v0.17.2
        with:
          image: ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ matrix.service }}:latest
          format: spdx-json
          output-file: ${{ matrix.service }}-sbom.spdx.json

      - name: Upload SBOM
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-sbom
          path: ${{ matrix.service }}-sbom.spdx.json
          retention-days: 30

  # 安全扫描
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: always() && needs.docker-build.result == 'success'
    strategy:
      matrix:
        service: ['api-service', 'websoft9-agent']
        include:
          - service: api-service
            context: webox/api-service
          - service: websoft9-agent
            context: webox/websoft9-agent
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}-results.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.service }}-results.sarif'
        continue-on-error: true

      - name: Set up Go for Gosec
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install and Run Gosec Security Scanner
        working-directory: ${{ matrix.context }}
        run: |
          echo "安装 Gosec..."
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          
          echo "运行 Gosec 安全扫描..."
          # 使用 || true 确保即使发现安全问题也不会失败
          $(go env GOPATH)/bin/gosec -fmt sarif -out ../gosec-${{ matrix.service }}-results.sarif ./... || true
          
          # 检查文件是否生成
          if [ ! -f "../gosec-${{ matrix.service }}-results.sarif" ]; then
            echo "Gosec 扫描未生成 SARIF 文件，创建空结果文件"
            cat > ../gosec-${{ matrix.service }}-results.sarif << 'EOF'
          {
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "gosec",
                    "version": "latest"
                  }
                },
                "results": []
              }
            ]
          }
          EOF
          fi
          
          echo "Gosec 扫描完成"

      - name: Upload Gosec scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'gosec-${{ matrix.service }}-results.sarif'
        continue-on-error: true

      - name: Generate security scan summary
        run: |
          echo "## 🔒 安全扫描结果" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ${{ matrix.service }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 检查 Trivy 结果
          if [ -f "trivy-${{ matrix.service }}-results.sarif" ]; then
            echo "✅ Trivy 容器安全扫描已完成" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Trivy 容器安全扫描未完成" >> $GITHUB_STEP_SUMMARY
          fi
          
          # 检查 Gosec 结果
          if [ -f "gosec-${{ matrix.service }}-results.sarif" ]; then
            echo "✅ Gosec 代码安全扫描已完成" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Gosec 代码安全扫描未完成" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "详细的安全扫描结果请查看 GitHub Security 标签页。" >> $GITHUB_STEP_SUMMARY

  # 性能测试
  performance-test:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run benchmark tests
        run: |
          echo "运行性能测试..."
          mkdir -p reports
          
          # 运行基准测试
          go test -bench=. -benchmem -run=^$ ./... | tee reports/benchmark-results.txt
          
          # 生成性能报告
          echo "## 性能测试报告" > reports/performance-report.md
          echo "" >> reports/performance-report.md
          echo "### 基准测试结果" >> reports/performance-report.md
          echo "" >> reports/performance-report.md
          echo '```' >> reports/performance-report.md
          cat reports/benchmark-results.txt >> reports/performance-report.md
          echo '```' >> reports/performance-report.md

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: reports/
          retention-days: 30

  # 通知
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [code-quality, tests, build, docker-build, security-scan]
    if: always()
    steps:
      - name: Determine overall status
        id: status
        run: |
          code_quality="${{ needs.code-quality.result }}"
          tests="${{ needs.tests.result }}"
          build="${{ needs.build.result }}"
          docker_build="${{ needs.docker-build.result }}"
          security_scan="${{ needs.security-scan.result }}"
          
          echo "代码质量检查: $code_quality"
          echo "测试: $tests"
          echo "构建: $build"
          echo "Docker 构建: $docker_build"
          echo "安全扫描: $security_scan"
          
          # 确定整体状态
          if [[ "$code_quality" == "failure" || "$build" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=CI 流水线失败" >> $GITHUB_OUTPUT
          elif [[ "$tests" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=测试失败" >> $GITHUB_OUTPUT
          elif [[ "$docker_build" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=Docker 构建失败" >> $GITHUB_OUTPUT
          elif [[ "$security_scan" == "failure" ]]; then
            echo "status=warning" >> $GITHUB_OUTPUT
            echo "message=安全扫描发现问题" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=CI 流水线成功" >> $GITHUB_OUTPUT
          fi

      - name: Prepare email content
        id: email
        run: |
          status="${{ steps.status.outputs.status }}"
          message="${{ steps.status.outputs.message }}"
          
          # 设置邮件主题
          if [ "$status" = "success" ]; then
            subject="✅ CI 成功 - ${{ github.repository }} (${{ github.ref_name }})"
          elif [ "$status" = "warning" ]; then
            subject="⚠️ CI 警告 - ${{ github.repository }} (${{ github.ref_name }})"
          else
            subject="❌ CI 失败 - ${{ github.repository }} (${{ github.ref_name }})"
          fi
          
          echo "subject=$subject" >> $GITHUB_OUTPUT
          
          # 生成邮件正文
          cat > email_body.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="UTF-8">
              <style>
                  body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
                  .header { background-color: #f4f4f4; padding: 20px; border-radius: 5px; margin-bottom: 20px; }
                  .status-success { color: #28a745; }
                  .status-warning { color: #ffc107; }
                  .status-failure { color: #dc3545; }
                  .info-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                  .info-table th, .info-table td { border: 1px solid #ddd; padding: 12px; text-align: left; }
                  .info-table th { background-color: #f2f2f2; }
                  .footer { margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd; font-size: 12px; color: #666; }
              </style>
          </head>
          <body>
              <div class="header">
                  <h2>🚀 CI 流水线执行报告</h2>
                  <p><strong>仓库:</strong> ${{ github.repository }}</p>
                  <p><strong>状态:</strong> <span class="status-$(echo $status | tr '[:upper:]' '[:lower:]')">$message</span></p>
              </div>
              
              <h3>📋 基本信息</h3>
              <table class="info-table">
                  <tr><th>分支</th><td>${{ github.ref_name }}</td></tr>
                  <tr><th>提交</th><td>${{ github.sha }}</td></tr>
                  <tr><th>作者</th><td>${{ github.actor }}</td></tr>
                  <tr><th>触发事件</th><td>${{ github.event_name }}</td></tr>
                  <tr><th>执行时间</th><td>$(date)</td></tr>
              </table>
              
              <h3>🔍 执行结果</h3>
              <table class="info-table">
                  <tr><th>阶段</th><th>状态</th></tr>
                  <tr><td>代码质量检查</td><td>${{ needs.code-quality.result }}</td></tr>
                  <tr><td>单元测试</td><td>${{ needs.tests.result }}</td></tr>
                  <tr><td>服务构建</td><td>${{ needs.build.result }}</td></tr>
                  <tr><td>Docker 构建</td><td>${{ needs.docker-build.result }}</td></tr>
                  <tr><td>安全扫描</td><td>${{ needs.security-scan.result }}</td></tr>
              </table>
              
              <h3>🔗 相关链接</h3>
              <ul>
                  <li><a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">查看工作流运行详情</a></li>
                  <li><a href="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}">查看提交详情</a></li>
                  <li><a href="${{ github.server_url }}/${{ github.repository }}">访问仓库</a></li>
              </ul>
              
              <div class="footer">
                  <p>此邮件由 GitHub Actions 自动发送，请勿回复。</p>
                  <p>如有问题，请联系开发团队。</p>
              </div>
          </body>
          </html>
          EOF

      - name: Send email notification
        if: always() && vars.NOTIFICATION_EMAIL != ''
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ vars.SMTP_SERVER || 'smtp.gmail.com' }}
          server_port: ${{ vars.SMTP_PORT || '587' }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: ${{ steps.email.outputs.subject }}
          to: ${{ vars.NOTIFICATION_EMAIL }}
          from: ${{ vars.FROM_EMAIL || secrets.SMTP_USERNAME }}
          html_body: file://email_body.html
          priority: ${{ steps.status.outputs.status == 'failure' && 'high' || 'normal' }}

  # CI 总结
  ci-summary:
    name: 📊 CI Summary
    runs-on: ubuntu-latest
    needs: [code-quality, tests, build, docker-build, security-scan, performance-test]
    if: always()
    steps:
      - name: Generate CI summary
        run: |
          echo "# 🚀 CI 流水线执行报告" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**分支:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**提交:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**触发者:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**执行时间:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 📋 执行结果" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 阶段 | 状态 | 耗时 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 代码质量检查 | ${{ needs.code-quality.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| 测试执行 | ${{ needs.tests.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| 服务构建 | ${{ needs.build.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker 构建 | ${{ needs.docker-build.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| 安全扫描 | ${{ needs.security-scan.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| 性能测试 | ${{ needs.performance-test.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 确定整体状态
          if [[ "${{ needs.code-quality.result }}" == "failure" || "${{ needs.build.result }}" == "failure" ]]; then
            echo "## ❌ 流水线失败" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "关键阶段失败，请检查日志并修复问题。" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.tests.result }}" == "failure" ]]; then
            echo "## ⚠️ 测试失败" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "测试阶段失败，请检查测试用例并修复问题。" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ✅ 流水线成功" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "所有关键阶段都已成功完成！" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📎 相关链接" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [工作流运行](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- [提交详情](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "- [Docker 镜像](https://hub.docker.com/r/${{ env.REGISTRY_NAMESPACE }})" >> $GITHUB_STEP_SUMMARY
          fi