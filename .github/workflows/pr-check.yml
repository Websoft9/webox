name: 🔍 PR Check

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, edited]

# 添加必要的权限
permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

env:
  GO_VERSION: "1.24.5"
  COVERAGE_THRESHOLD: 80

jobs:
  # 提交消息格式检查
  commit-message-check:
    name: 📝 Commit Message Check
    runs-on: ubuntu-latest
    if: github.event.action != 'edited'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check commit messages
        run: |
          echo "检查提交消息格式..."

          # 获取 PR 中的所有提交
          commits=$(git rev-list --reverse ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})

          failed_commits=()

          for commit in $commits; do
            message=$(git log --format=%s -n 1 $commit)
            echo "检查提交: $commit"
            echo "消息: $message"

            if ! ./scripts/check-commit-message.sh "$message"; then
              failed_commits+=("$commit: $message")
            fi
          done

          if [ ${#failed_commits[@]} -gt 0 ]; then
            echo "❌ 以下提交消息格式不正确:"
            for failed in "${failed_commits[@]}"; do
              echo "  - $failed"
            done
            echo ""
            echo "请修改提交消息以符合 Conventional Commits 规范:"
            echo "格式: <type>[optional scope]: <description>"
            echo "示例: feat(auth): add JWT token refresh mechanism"
            exit 1
          fi

          echo "✅ 所有提交消息格式正确"

  # 代码格式检查
  code-format-check:
    name: 🎨 Code Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            api-service/go.sum
            websoft9-agent/go.sum

      - name: Check Go formatting
        run: |
          echo "检查 Go 代码格式..."

          # 检查 api-service
          cd api-service
          unformatted=$(gofmt -l .)
          if [ -n "$unformatted" ]; then
            echo "❌ api-service 以下文件格式不正确:"
            echo "$unformatted"
            exit 1
          fi

          # 检查 websoft9-agent
          cd ../websoft9-agent
          unformatted=$(gofmt -l .)
          if [ -n "$unformatted" ]; then
            echo "❌ websoft9-agent 以下文件格式不正确:"
            echo "$unformatted"
            exit 1
          fi

          echo "✅ Go 代码格式正确"

      - name: Run golangci-lint for api-service
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: api-service
          args: --timeout=5m --out-format=github-actions

      - name: Run golangci-lint for websoft9-agent
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: websoft9-agent
          args: --timeout=5m --out-format=github-actions

  # 单元测试
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    strategy:
      matrix:
        go-version: ["1.24.5"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
          cache-dependency-path: |
            api-service/go.sum
            websoft9-agent/go.sum

      - name: Run unit tests for api-service
        working-directory: api-service
        run: |
          echo "运行 api-service 单元测试..."
          mkdir -p reports

          # 运行测试并生成覆盖率报告
          go test -v -race -coverprofile=reports/coverage.out -covermode=atomic ./... | tee reports/test-results.txt

          # 生成覆盖率报告
          if [ -f "reports/coverage.out" ]; then
            go tool cover -html=reports/coverage.out -o reports/coverage.html
            go tool cover -func=reports/coverage.out > reports/coverage.txt

            # 计算总覆盖率
            total_coverage=$(go tool cover -func=reports/coverage.out | grep "total:" | awk '{print $3}' | sed 's/%//' || echo "0")
            echo "API Service 总覆盖率: ${total_coverage}%"
            echo "api_coverage=$total_coverage" >> $GITHUB_ENV
          fi

      - name: Run unit tests for websoft9-agent
        working-directory: websoft9-agent
        run: |
          echo "运行 websoft9-agent 单元测试..."
          mkdir -p reports

          # 运行测试并生成覆盖率报告
          go test -v -race -coverprofile=reports/coverage.out -covermode=atomic ./... | tee reports/test-results.txt

          # 生成覆盖率报告
          if [ -f "reports/coverage.out" ]; then
            go tool cover -html=reports/coverage.out -o reports/coverage.html
            go tool cover -func=reports/coverage.out > reports/coverage.txt

            # 计算总覆盖率
            total_coverage=$(go tool cover -func=reports/coverage.out | grep "total:" | awk '{print $3}' | sed 's/%//' || echo "0")
            echo "Agent 总覆盖率: ${total_coverage}%"
            echo "agent_coverage=$total_coverage" >> $GITHUB_ENV
          fi

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-go${{ matrix.go-version }}
          path: |
            api-service/reports/
            websoft9-agent/reports/
          retention-days: 30

      - name: Comment coverage on PR
        if: matrix.go-version == '1.24.5'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            try {
              const fs = require('fs');
              const path = require('path');

              // 获取覆盖率数据
              const apiCoverage = process.env.api_coverage || '0';
              const agentCoverage = process.env.agent_coverage || '0';
              const threshold = process.env.COVERAGE_THRESHOLD;

              // 计算平均覆盖率
              const avgCoverage = ((parseFloat(apiCoverage) + parseFloat(agentCoverage)) / 2).toFixed(1);
              const isWarning = parseFloat(avgCoverage) < parseFloat(threshold);

              let coverageIcon = '✅';
              if (isWarning) {
                coverageIcon = '⚠️';
              }

              let detailsSection = '';

              // 尝试读取覆盖率详细信息
              try {
                const apiCoverageFile = path.join('api-service', 'reports', 'coverage.txt');
                const agentCoverageFile = path.join('websoft9-agent', 'reports', 'coverage.txt');

                let apiDetails = '';
                let agentDetails = '';

                if (fs.existsSync(apiCoverageFile)) {
                  apiDetails = fs.readFileSync(apiCoverageFile, 'utf8');
                }

                if (fs.existsSync(agentCoverageFile)) {
                  agentDetails = fs.readFileSync(agentCoverageFile, 'utf8');
                }

                if (apiDetails || agentDetails) {
                  detailsSection = `
              <details>
              <summary>详细覆盖率信息</summary>

              ${apiDetails ? `**API Service:**
              \`\`\`
              ${apiDetails}
              \`\`\`
              ` : ''}

              ${agentDetails ? `**Websoft9 Agent:**
              \`\`\`
              ${agentDetails}
              \`\`\`
              ` : ''}

              </details>`;
                }
              } catch (error) {
                console.log('无法读取覆盖率详细信息:', error.message);
              }

              const comment = `## ${coverageIcon} 测试覆盖率报告

              | 组件 | 覆盖率 | 状态 |
              |------|--------|------|
              | API Service | ${apiCoverage}% | ${parseFloat(apiCoverage) >= parseFloat(threshold) ? '✅' : '⚠️'} |
              | Websoft9 Agent | ${agentCoverage}% | ${parseFloat(agentCoverage) >= parseFloat(threshold) ? '✅' : '⚠️'} |
              | **平均覆盖率** | **${avgCoverage}%** | **${isWarning ? '⚠️' : '✅'}** |

              **阈值:** ${threshold}%

              ${isWarning ? '⚠️ **警告:** 部分组件覆盖率低于阈值，建议增加测试用例' : '✅ 所有组件覆盖率达到要求'}
              ${detailsSection}
              `;

              // 查找现有的覆盖率评论
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });

              const existingComment = comments.find(comment =>
                comment.body.includes('测试覆盖率报告')
              );

              if (existingComment) {
                // 更新现有评论
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: comment
                });
                console.log('✅ 覆盖率评论已更新');
              } else {
                // 创建新评论
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: comment
                });
                console.log('✅ 覆盖率评论已创建');
              }
            } catch (error) {
              console.log('⚠️ 无法创建或更新覆盖率评论:', error.message);
              console.log('覆盖率数据仍会在工作流日志中显示');

              // 在控制台输出覆盖率信息作为备选方案
              const apiCoverage = process.env.api_coverage || '0';
              const agentCoverage = process.env.agent_coverage || '0';
              const threshold = process.env.COVERAGE_THRESHOLD;
              const avgCoverage = ((parseFloat(apiCoverage) + parseFloat(agentCoverage)) / 2).toFixed(1);

              console.log('📊 测试覆盖率报告:');
              console.log(`API Service: ${apiCoverage}%`);
              console.log(`Websoft9 Agent: ${agentCoverage}%`);
              console.log(`平均覆盖率: ${avgCoverage}%`);
              console.log(`阈值: ${threshold}%`);
            }

  # 构建验证
  build-check:
    name: 🔨 Build Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ["api-service", "websoft9-agent"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build ${{ matrix.service }}
        run: |
          # 打印当前目录路径
          echo "当前工作目录: $(pwd)"
          echo "目录内容:"
          ls -la

          if [ ! -d "${{ matrix.service }}" ]; then
            echo "⏭️ 跳过 ${{ matrix.service }}，目录不存在"
            exit 0
          fi

          echo "构建 ${{ matrix.service }}..."
          cd ${{ matrix.service }}
          echo "切换到目录: $(pwd)"

          # 下载依赖
          go mod download

          # 构建
          if [ -f "Makefile" ]; then
            make build
          else
            go build -v ./...
          fi

          echo "✅ ${{ matrix.service }} 构建成功"

  # 安全扫描
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install Gosec
        run: |
          echo "安装 Gosec 安全扫描工具..."
          go install github.com/securego/gosec/v2/cmd/gosec@latest

      - name: Run Gosec Security Scanner for api-service
        run: |
          echo "运行 api-service 安全扫描..."

          if [ ! -d "api-service" ]; then
            echo "⏭️ 跳过 api-service，目录不存在"
          else
            cd api-service
            mkdir -p reports

            echo "扫描 api-service Go 代码..."
            # 使用配置文件（如果存在）
            config_flag=""
            if [ -f "../.gosec.json" ]; then
              config_flag="-conf ../.gosec.json"
            fi

            if gosec $config_flag -fmt sarif -out reports/gosec-results.sarif ./... 2>/dev/null; then
              echo "✅ api-service SARIF 报告生成成功"
            else
              echo "⚠️ api-service SARIF 报告生成失败，尝试基本扫描"
              gosec $config_flag ./... || echo "⚠️ api-service 安全扫描完成（可能有警告）"
            fi

            # 生成 JSON 报告（用于调试）
            gosec $config_flag -fmt json -out reports/gosec-results.json ./... 2>/dev/null || true
            cd ../..
          fi

      - name: Run Gosec Security Scanner for websoft9-agent
        run: |
          echo "运行 websoft9-agent 安全扫描..."

          if [ ! -d "websoft9-agent" ]; then
            echo "⏭️ 跳过 websoft9-agent，目录不存在"
          else
            cd websoft9-agent
            mkdir -p reports

            echo "扫描 websoft9-agent Go 代码..."
            # 使用配置文件（如果存在）
            config_flag=""
            if [ -f "../.gosec.json" ]; then
              config_flag="-conf ../.gosec.json"
            fi

            if gosec $config_flag -fmt sarif -out reports/gosec-results.sarif ./... 2>/dev/null; then
              echo "✅ websoft9-agent SARIF 报告生成成功"
            else
              echo "⚠️ websoft9-agent SARIF 报告生成失败，尝试基本扫描"
              gosec $config_flag ./... || echo "⚠️ websoft9-agent 安全扫描完成（可能有警告）"
            fi

            # 生成 JSON 报告（用于调试）
            gosec $config_flag -fmt json -out reports/gosec-results.json ./... 2>/dev/null || true
            cd ../..
          fi

      - name: Upload Gosec scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: gosec-security-reports
          path: |
            api-service/reports/gosec-*
            websoft9-agent/reports/gosec-*
          retention-days: 30

      - name: Upload Gosec scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('api-service/reports/gosec-results.sarif') != ''
        with:
          sarif_file: api-service/reports/gosec-results.sarif
          category: api-service-gosec

      - name: Upload Agent Gosec scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('websoft9-agent/reports/gosec-results.sarif') != ''
        with:
          sarif_file: websoft9-agent/reports/gosec-results.sarif
          category: websoft9-agent-gosec

  # 最终状态检查
  pr-check-summary:
    name: 📊 PR Check Summary
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    needs:
      [
        commit-message-check,
        code-format-check,
        unit-tests,
        build-check,
        security-scan,
      ]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "=== PR 检查结果汇总 ==="

          # 检查各个作业的状态
          commit_check="${{ needs.commit-message-check.result }}"
          code_format="${{ needs.code-format-check.result }}"
          unit_tests="${{ needs.unit-tests.result }}"
          build_check="${{ needs.build-check.result }}"
          security_scan="${{ needs.security-scan.result }}"

          echo "提交消息检查: $commit_check"
          echo "代码格式检查: $code_format"
          echo "单元测试: $unit_tests"
          echo "构建检查: $build_check"
          echo "安全扫描: $security_scan"

          # 检查是否有失败的作业
          failed_jobs=()

          [ "$commit_check" = "failure" ] && failed_jobs+=("提交消息检查")
          [ "$code_format" = "failure" ] && failed_jobs+=("代码格式检查")
          [ "$unit_tests" = "failure" ] && failed_jobs+=("单元测试")
          [ "$build_check" = "failure" ] && failed_jobs+=("构建检查")
          [ "$security_scan" = "failure" ] && failed_jobs+=("安全扫描")

          if [ ${#failed_jobs[@]} -gt 0 ]; then
            echo ""
            echo "❌ 以下检查失败:"
            for job in "${failed_jobs[@]}"; do
              echo "  - $job"
            done
            echo ""
            echo "请修复失败的检查项后重新提交"
            exit 1
          fi

          echo ""
          echo "✅ 所有 PR 检查通过！"

      - name: Comment PR check summary
        if: always()
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            try {
              const needs = ${{ toJSON(needs) }};

              let summary = '## 📊 PR 检查结果汇总\n\n';
              let allPassed = true;

              const jobs = [
                { name: '提交消息检查', key: 'commit-message-check' },
                { name: '代码格式检查', key: 'code-format-check' },
                { name: '单元测试', key: 'unit-tests' },
                { name: '构建检查', key: 'build-check' },
                { name: '安全扫描', key: 'security-scan' }
              ];

              for (const job of jobs) {
                const result = needs[job.key]?.result || 'skipped';
                let icon = '✅';

                if (result === 'failure') {
                  icon = '❌';
                  allPassed = false;
                } else if (result === 'cancelled') {
                  icon = '⏹️';
                } else if (result === 'skipped') {
                  icon = '⏭️';
                }

                summary += `${icon} **${job.name}:** ${result}\n`;
              }

              summary += '\n';

              if (allPassed) {
                summary += '🎉 **所有检查通过！** 此 PR 可以合并。';
              } else {
                summary += '⚠️ **部分检查失败** 请修复失败的检查项后重新提交。';
              }

              // 查找现有的汇总评论
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });

              const existingComment = comments.find(comment =>
                comment.body.includes('PR 检查结果汇总')
              );

              if (existingComment) {
                // 更新现有评论
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: summary
                });
                console.log('✅ PR 检查汇总评论已更新');
              } else {
                // 创建新评论
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: summary
                });
                console.log('✅ PR 检查汇总评论已创建');
              }
            } catch (error) {
              console.log('⚠️ 无法创建或更新 PR 检查汇总评论:', error.message);
              console.log('检查结果仍会在工作流日志中显示');

              // 在控制台输出汇总信息作为备选方案
              const needs = ${{ toJSON(needs) }};
              console.log('📊 PR 检查结果汇总:');

              const jobs = [
                { name: '提交消息检查', key: 'commit-message-check' },
                { name: '代码格式检查', key: 'code-format-check' },
                { name: '单元测试', key: 'unit-tests' },
                { name: '构建检查', key: 'build-check' },
                { name: '安全扫描', key: 'security-scan' }
              ];

              for (const job of jobs) {
                const result = needs[job.key]?.result || 'skipped';
                console.log(`${job.name}: ${result}`);
              }
            }
