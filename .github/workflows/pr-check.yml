name: 🔍 PR Check

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened, edited ]

env:
  GO_VERSION: '1.24.5'
  COVERAGE_THRESHOLD: 80

jobs:
  # 提交消息格式检查
  commit-message-check:
    name: 📝 Commit Message Check
    runs-on: ubuntu-latest
    if: github.event.action != 'edited'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check commit messages
        run: |
          echo "检查提交消息格式..."
          
          # 获取 PR 中的所有提交
          commits=$(git rev-list --reverse ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
          
          failed_commits=()
          
          for commit in $commits; do
            message=$(git log --format=%s -n 1 $commit)
            echo "检查提交: $commit"
            echo "消息: $message"
            
            if ! ./scripts/check-commit-message.sh "$message"; then
              failed_commits+=("$commit: $message")
            fi
          done
          
          if [ ${#failed_commits[@]} -gt 0 ]; then
            echo "❌ 以下提交消息格式不正确:"
            for failed in "${failed_commits[@]}"; do
              echo "  - $failed"
            done
            echo ""
            echo "请修改提交消息以符合 Conventional Commits 规范:"
            echo "格式: <type>[optional scope]: <description>"
            echo "示例: feat(auth): add JWT token refresh mechanism"
            exit 1
          fi
          
          echo "✅ 所有提交消息格式正确"

  # PR 标题和描述检查
  pr-format-check:
    name: 📋 PR Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Check PR title format
        run: |
          title="${{ github.event.pull_request.title }}"
          echo "检查 PR 标题: $title"
          
          # 检查 PR 标题是否符合 Conventional Commits 格式
          if [[ ! "$title" =~ ^(feat|fix|docs|style|refactor|test|chore|perf|ci)(\([a-zA-Z0-9_-]+\))?: .{1,50}$ ]]; then
            echo "❌ PR 标题格式不正确"
            echo "正确格式: <type>[optional scope]: <description>"
            echo "示例: feat(auth): add JWT token refresh mechanism"
            exit 1
          fi
          
          echo "✅ PR 标题格式正确"

      - name: Check PR description
        run: |
          description="${{ github.event.pull_request.body }}"
          
          if [ -z "$description" ] || [ "$description" = "null" ]; then
            echo "❌ PR 描述不能为空"
            echo "请添加 PR 描述，说明变更内容和测试情况"
            exit 1
          fi
          
          # 检查是否包含必要的信息
          required_sections=("变更类型" "变更描述" "测试说明")
          missing_sections=()
          
          for section in "${required_sections[@]}"; do
            if [[ ! "$description" =~ $section ]]; then
              missing_sections+=("$section")
            fi
          done
          
          if [ ${#missing_sections[@]} -gt 0 ]; then
            echo "⚠️ PR 描述缺少以下部分:"
            for section in "${missing_sections[@]}"; do
              echo "  - $section"
            done
            echo ""
            echo "建议使用 PR 模板填写完整信息"
          fi
          
          echo "✅ PR 描述检查完成"

  # 代码格式检查
  code-format-check:
    name: 🎨 Code Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            webox/api-service/go.sum
            webox/websoft9-agent/go.sum

      - name: Check Go formatting
        run: |
          echo "检查 Go 代码格式..."
          
          # 检查 api-service
          cd webox/api-service
          unformatted=$(gofmt -l .)
          if [ -n "$unformatted" ]; then
            echo "❌ api-service 以下文件格式不正确:"
            echo "$unformatted"
            exit 1
          fi
          
          # 检查 websoft9-agent
          cd ../websoft9-agent
          unformatted=$(gofmt -l .)
          if [ -n "$unformatted" ]; then
            echo "❌ websoft9-agent 以下文件格式不正确:"
            echo "$unformatted"
            exit 1
          fi
          
          echo "✅ Go 代码格式正确"

      - name: Run golangci-lint for api-service
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: webox/api-service
          args: --timeout=5m --out-format=github-actions

      - name: Run golangci-lint for websoft9-agent
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: webox/websoft9-agent
          args: --timeout=5m --out-format=github-actions

  # 单元测试
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.23', '1.24.5']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
          cache-dependency-path: |
            webox/api-service/go.sum
            webox/websoft9-agent/go.sum

      - name: Run unit tests for api-service
        working-directory: webox/api-service
        run: |
          echo "运行 api-service 单元测试..."
          mkdir -p reports
          
          # 运行测试并生成覆盖率报告
          go test -v -race -coverprofile=reports/coverage.out -covermode=atomic ./... | tee reports/test-results.txt
          
          # 生成覆盖率报告
          if [ -f "reports/coverage.out" ]; then
            go tool cover -html=reports/coverage.out -o reports/coverage.html
            go tool cover -func=reports/coverage.out > reports/coverage.txt
            
            # 计算总覆盖率
            total_coverage=$(go tool cover -func=reports/coverage.out | grep "total:" | awk '{print $3}' | sed 's/%//' || echo "0")
            echo "API Service 总覆盖率: ${total_coverage}%"
            echo "api_coverage=$total_coverage" >> $GITHUB_ENV
          fi

      - name: Run unit tests for websoft9-agent
        working-directory: webox/websoft9-agent
        run: |
          echo "运行 websoft9-agent 单元测试..."
          mkdir -p reports
          
          # 运行测试并生成覆盖率报告
          go test -v -race -coverprofile=reports/coverage.out -covermode=atomic ./... | tee reports/test-results.txt
          
          # 生成覆盖率报告
          if [ -f "reports/coverage.out" ]; then
            go tool cover -html=reports/coverage.out -o reports/coverage.html
            go tool cover -func=reports/coverage.out > reports/coverage.txt
            
            # 计算总覆盖率
            total_coverage=$(go tool cover -func=reports/coverage.out | grep "total:" | awk '{print $3}' | sed 's/%//' || echo "0")
            echo "Agent 总覆盖率: ${total_coverage}%"
            echo "agent_coverage=$total_coverage" >> $GITHUB_ENV
          fi

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-go${{ matrix.go-version }}
          path: |
            webox/api-service/reports/
            webox/websoft9-agent/reports/
          retention-days: 30

      - name: Comment coverage on PR
        if: matrix.go-version == '1.24.5'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = process.env.total_coverage;
            const threshold = process.env.COVERAGE_THRESHOLD;
            const isWarning = process.env.coverage_warning === 'true';
            
            let coverageIcon = '✅';
            let coverageColor = 'green';
            
            if (isWarning) {
              coverageIcon = '⚠️';
              coverageColor = 'orange';
            }
            
            const comment = `## ${coverageIcon} 测试覆盖率报告
            
            **总覆盖率:** ${coverage}% (阈值: ${threshold}%)
            
            ${isWarning ? '⚠️ **警告:** 覆盖率低于阈值，建议增加测试用例' : '✅ 覆盖率达到要求'}
            
            <details>
            <summary>详细覆盖率信息</summary>
            
            \`\`\`
            ${fs.readFileSync('reports/coverage.txt', 'utf8')}
            \`\`\`
            
            </details>
            `;
            
            // 查找现有的覆盖率评论
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('测试覆盖率报告')
            );
            
            if (existingComment) {
              // 更新现有评论
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              // 创建新评论
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

  # 构建验证
  build-check:
    name: 🔨 Build Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ['api-service', 'websoft9-agent']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build ${{ matrix.service }}
        run: |
          echo "构建 ${{ matrix.service }}..."
          cd webox/${{ matrix.service }}
          
          # 下载依赖
          go mod download
          
          # 构建
          if [ -f "Makefile" ]; then
            make build
          else
            go build -v ./...
          fi
          
          echo "✅ ${{ matrix.service }} 构建成功"

  # 安全扫描
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@v1
        with:
          args: '-fmt sarif -out gosec-results.sarif ./...'
          
      - name: Upload Gosec scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: gosec-results.sarif

  # 最终状态检查
  pr-check-summary:
    name: 📊 PR Check Summary
    runs-on: ubuntu-latest
    needs: [commit-message-check, pr-format-check, code-format-check, unit-tests, build-check, security-scan]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "=== PR 检查结果汇总 ==="
          
          # 检查各个作业的状态
          commit_check="${{ needs.commit-message-check.result }}"
          pr_format="${{ needs.pr-format-check.result }}"
          code_format="${{ needs.code-format-check.result }}"
          unit_tests="${{ needs.unit-tests.result }}"
          build_check="${{ needs.build-check.result }}"
          security_scan="${{ needs.security-scan.result }}"
          
          echo "提交消息检查: $commit_check"
          echo "PR 格式检查: $pr_format"
          echo "代码格式检查: $code_format"
          echo "单元测试: $unit_tests"
          echo "构建检查: $build_check"
          echo "安全扫描: $security_scan"
          
          # 检查是否有失败的作业
          failed_jobs=()
          
          [ "$commit_check" = "failure" ] && failed_jobs+=("提交消息检查")
          [ "$pr_format" = "failure" ] && failed_jobs+=("PR 格式检查")
          [ "$code_format" = "failure" ] && failed_jobs+=("代码格式检查")
          [ "$unit_tests" = "failure" ] && failed_jobs+=("单元测试")
          [ "$build_check" = "failure" ] && failed_jobs+=("构建检查")
          [ "$security_scan" = "failure" ] && failed_jobs+=("安全扫描")
          
          if [ ${#failed_jobs[@]} -gt 0 ]; then
            echo ""
            echo "❌ 以下检查失败:"
            for job in "${failed_jobs[@]}"; do
              echo "  - $job"
            done
            echo ""
            echo "请修复失败的检查项后重新提交"
            exit 1
          fi
          
          echo ""
          echo "✅ 所有 PR 检查通过！"

      - name: Comment PR check summary
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const needs = ${{ toJSON(needs) }};
            
            let summary = '## 📊 PR 检查结果汇总\n\n';
            let allPassed = true;
            
            const jobs = [
              { name: '提交消息检查', key: 'commit-message-check' },
              { name: 'PR 格式检查', key: 'pr-format-check' },
              { name: '代码格式检查', key: 'code-format-check' },
              { name: '单元测试', key: 'unit-tests' },
              { name: '构建检查', key: 'build-check' },
              { name: '安全扫描', key: 'security-scan' }
            ];
            
            for (const job of jobs) {
              const result = needs[job.key]?.result || 'skipped';
              let icon = '✅';
              
              if (result === 'failure') {
                icon = '❌';
                allPassed = false;
              } else if (result === 'cancelled') {
                icon = '⏹️';
              } else if (result === 'skipped') {
                icon = '⏭️';
              }
              
              summary += `${icon} **${job.name}:** ${result}\n`;
            }
            
            summary += '\n';
            
            if (allPassed) {
              summary += '🎉 **所有检查通过！** 此 PR 可以合并。';
            } else {
              summary += '⚠️ **部分检查失败** 请修复失败的检查项后重新提交。';
            }
            
            // 查找现有的汇总评论
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('PR 检查结果汇总')
            );
            
            if (existingComment) {
              // 更新现有评论
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: summary
              });
            } else {
              // 创建新评论
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }